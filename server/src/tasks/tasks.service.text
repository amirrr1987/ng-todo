import {
  BadRequestException,
  Injectable,
  NotFoundException,
} from '@nestjs/common';
import { v7 as uuid } from 'uuid';
import {
  AllTaskResponseDto,
  CreateTaskRequestDto,
  CreateTaskResponseDto,
  GetByFilterTaskQueryDto,
  GetByFilterTaskResponseDto,
  GetOneTaskIdParamDto,
  GetOneTaskResponseDto,
  UpdateTaskBodyDto,
  UpdateTaskResponseDto,
  DeleteTaskIdParamDto,
  DeleteTaskResponseDto,
} from './dto';
import { BaseTaskDto, TaskStatus } from './dto/base-task.dto';
@Injectable()
export class TasksService {
  constructor() {}
  private tasks: BaseTaskDto[] = [];
  async create(dto: CreateTaskRequestDto): Promise<CreateTaskResponseDto> {
    const task: BaseTaskDto | null = {
      id: uuid(),
      title: dto.title,
      description: dto.description,
      status: TaskStatus.TODO,
    };
    this.tasks.push(task);

    return task.id;
  }

  findByFilter(query: GetByFilterTaskQueryDto): GetByFilterTaskResponseDto {
    const { search, status } = query;
    let tasks = this.findAll();
    if (search) {
      tasks = tasks.filter(
        (task) =>
          task.description.toLowerCase().includes(search) ||
          task.title.toLowerCase().includes(search),
      );
    }
    if (status) {
      tasks = tasks.filter((task) => task.status === status);
    }
    return tasks;
  }

  findAll(): AllTaskResponseDto {
    return this.tasks;
  }
  findIndex(id): number {
    if (!id) {
      throw new BadRequestException(`ID: ${id} is not valid`);
    }
    const index = this.tasks.findIndex((task) => task.id === id);
    if (index < 0) {
      throw new NotFoundException(`Task width this ID: ${id} not found`);
    }
    return index;
  }

  findOne(id: GetOneTaskIdParamDto): GetOneTaskResponseDto {
    const index = this.findIndex(id);
    return this.tasks[index];
  }

  update(dto: UpdateTaskBodyDto): UpdateTaskResponseDto {
    const index = this.findIndex(dto.id);

    if (dto.description) {
      this.tasks[index].description = dto.description;
    }

    if (dto.status) {
      this.tasks[index].status = dto.status;
    }

    if (dto.title) {
      this.tasks[index].title = dto.title;
    }

    return this.tasks[index].id;
  }

  async remove(id: DeleteTaskIdParamDto): Promise<DeleteTaskResponseDto> {
    const index = this.findIndex(id);
    this.tasks.splice(index, 1);
    return id;
  }
}
